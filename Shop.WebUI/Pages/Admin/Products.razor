@page "/Admin/Products"

@using Shop.Domain.Models
@using Shop.WebUI.Services

@inject IHttpService HttpService

<h1>Products</h1>

<NavLink class="nav-link" href="Admin/AddProduct">
    <span class="oi oi-plus" aria-hidden="true">Add New</span>
</NavLink>

@if (products is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Value</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td hidden>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>$@product.Value.ToString()</td>
                    <td>
                        <a class="nav-link" href="/Admin/EditProduct/@product.Id">
                            <span class="oi oi-pencil" aria-hidden="true">Edit</span>
                        </a>
                        <a class="nav-link" href="/Admin/DeleteProduct/@product.Id">
                            <span class="oi oi-trash" aria-hidden="true">Delete</span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    private IEnumerable<Product> products = Array.Empty<Product>();

    protected override async Task OnInitializedAsync()
    {
        products = await HttpService.GetAsync<IEnumerable<Product>>("Admin");
    }
}
