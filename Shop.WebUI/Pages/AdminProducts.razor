@page "/AdminProducts"

@using Shop.Application.Commands.Products.Interfaces
@using Shop.Application.ViewModels

@using System.Text.Json
@using System.Text.Json.Serialization;

@inject IHttpClientFactory ClientFactory
@inject ProductViewModel Model

<h1>Products</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (getBranchesError)
{
    <p><em>Error</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in branches)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>$@product.Value.ToString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private IEnumerable<ProductViewModel> branches = Array.Empty<ProductViewModel>();
    private bool getBranchesError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var url = "https://localhost:44354/api/Admin";

        var request = new HttpRequestMessage(HttpMethod.Get, url);
        request.Headers.Add("Accept", "application/json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();

            branches = await JsonSerializer.DeserializeAsync<IEnumerable<ProductViewModel>>(responseStream);

        }
        else
        {
            getBranchesError = true;
        }

        shouldRender = true;
    }

}
